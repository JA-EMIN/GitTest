1. Git 설치
2. Git 계정 생성 : git config --global user.email "ABCD@ABCD.com"
		   git config --global user.name "ABCD"
		   git config --global --list
3. 작업폴더로 위치 -> git init
4. 파일 Add : git add "Git.txt"
5. 파일 Commit(Version 생성) :  git commit -m "파일 생성" 
* git add와 git commit은 왜 나누어 놓았을까? jpg와 같이 버전이 바뀔 필요가 없는 파일은 comment가 필요 없으므로 파일을 골라서 기록을 남기기 위해서
* git add : staging erea로 이동, commit할 파일을 골라놓았다
* git commit을 하였을 때는 repository erea
6. 파일이 많고, 선택하여 commit하고 싶을 때는 command 명령보다 개발환경에서 지원해주는 툴을 이용하는 것이 낫다.
7. git log --all --oneline : commit history 한줄로
8. git diff는 쓰레기라 쓸거면 git difftool

*vim에서 이동커서 h j k l, exit : qa
*git difftool commitid : 현재 파일과 해당 commit 비교
*git difftool commitid commitid : 현재 파일과 해당 commit 비교
*git config --global diff.tool vscode : VSCODE difftool 설정
*git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'
*근데 굳이 git difftool 보다 extension 설치

prac) 
- branch a 생성, a에서 couponA 파일 생성
- branch a에서 branch b 생성, b에서 couponB 파일 생성
- main에서 branch c 생성, c에서 couponC 파일 생성
- main branch에서 파일 수정.

9. git branch "name" : branch 생성
10. git switch "name" : branch 이동
11. git merge "name" : 기준이되는 branch로 이동 후, branch 합치기
12. conflict 발생시 코드 수정 후 git add & git commit
* ide환경에서 어떤 코드 선택할지 tool 제공

13. 3-way-merge : 각 branch에서 신규 commit이 발생한 경우, 기준 branch에서 한개의 노드를 더 만들어서 merge함.
14. fast-forward merge : 기준(main) branch에 신규 commit이 없는 경우 가장 진도가 많이 나간 branch가 main이 됨.
* git merge--no-ff "branch name" : fast-forward merge를 하기 싫을 때
* git branch -d "branch name" : 완료된 브랜치 삭제
* git branch -D "branch name" : merge 안한 브랜치 삭제.
15. rebase & fast-forward merge : 신규 branch의 시작점이 이동 후 fast-forward merge를 함, 한줄기 이동으로 보이게 할 수 있음.
								  3-way-merge는 git log출력 시 복잡해 보일 수 있어서 간단하고 짧은 브랜치들에 사용.
								  기존 commit을 다른 곳에 이어 붙이는 행위이므로 conflict 발생 가능 성 높음
* git switch "name" : 새로운 branch로 이동
* git rebase main : 중심 branch명을 입력
* git switch main : 중심 branch로 이동
* git merge "name" : 새로운 branch입력하여 merge
16. squash & merge : main에서 log 출력 시, 잔챙이 branch에서 commit 내역이 다보이면 복잡하므로 squash merge사용.
* git merge --squash "name" : 기존의 merge처럼 중심이 되는 branch로 이동 후, squash merge 실행.

17. git restore : 최근 commit 상태의 파일 상태로 restore
* git restore "file name" : 최근 commit 상태의 파일 상태로 복구
* git restore --source "commit id(hash)" "file name" : 특정 시점의 파일로 복구.
* git restore --staged "file name" : add 시켜 놓은 staging 취소.

18. git revert : 과거를 삭제할 수는 없고, commit을 취소할 수는 있음.
* git revert "commit id" : 해당 commit을 취소함.
* git revert "commit id" 이후 취소 내역에 대한 commit을 하게됨.
* git revert "commit id" "commit id" : 여러개 취소 가능
* git revert HEAD : 최근 commit 취소 가능

19. git reset : 과거로 모든걸 되돌리기
* git reset --hard "commit id"
* git reset --soft "commit id" : 리셋인데 변동사항 지우지 말고 스테이징 해놓기.

20. git push : 원격저장소에 저장
* github.com은 기본 branch name을 main으로 강요함. git branch -M main
* git push -u "remote address" "local branch name" : 원격저장소에 backup
* git remote add origin "remote address" : 긴 주소를 origin이라는 변수명에 저장
* git push -u : -u 옵션을 사용하여 저장할 원격 저장소가 자동으로 저장되어있다고 보면됨. 향후 git push만 사용하여 원격에 backup
* 원격저장소 최신내용이 로컬저장소에 있을 때만 git push 가능

21. git clone : 원격저장소에서 복사
* git clone "remote address" : 원격저장소의 git clone
* setting -> collaborators에 등록
* 협업자가 먼저 push를 한 경우 git pull을 먼저 해야함.
* git pull "remote address" "local branch name"